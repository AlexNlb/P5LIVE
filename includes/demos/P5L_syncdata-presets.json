{
  "version": "1.2.7",
  "revision": 31,
  "structure": [
    {
      "name": "syncdata-presets",
      "type": "folder",
      "toggle": "expand",
      "contents": [
        {
          "type": "sketch",
          "name": "syncdata-template"
        },
        {
          "name": "syncdata-mouseXY",
          "type": "sketch",
          "parent": "syncdata-presets"
        },
        {
          "name": "syncdata-midi",
          "type": "sketch"
        }
      ]
    }
  ],
  "sketches": [
    {
      "sketchName": "syncdata-template",
      "sketchCode": "/* syncData Preset : template\nUse 'syncData(obj)' in this window to sync data.\nUse 'parseData(obj)' in COCODING session to parse data.\n\n1 - SYNC DATA (active in Sync Data)\n2 - COCODE (paste in COCODING session and uncomment)\n*/\n\n/* 1 - SYNC DATA */\nlet obj = {preset:'template'};\nsyncData(obj); // transmit to others\n\n/* 2 - COCODE */\n// function parseData(obj){\n// \tprint(obj);\n// }\n"
    },
    {
      "sketchName": "syncdata-mouseXY",
      "sketchCode": "/* syncData Preset : mouseXY\nSends your mouseX/mouseY + random color to all users.\nDraws each received signal as ellipse on demand.\n\n1 - SYNC DATA (active in Sync Data)\n2 - COCODE (paste in COCODING session and uncomment)\n*/\n\n/* 1 - SYNC DATA */\nlet delay = 0.05; // time in sec\nlet randomColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n\nsetInterval(function() {\n\tsendMouse();\n}, delay * 1000);\n\nfunction sendMouse() {\n\tlet obj = {\n\t\tx: mouseX,\n\t\ty: mouseY,\n\t\tcolor: randomColor\n\t};\n\tsyncData(obj); // transmit to others\n}\n\n/* 2 - COCODE */\n// function parseData(obj){\n// \tfill(obj.color)\n// \tellipse(obj.x, obj.y, 20);\n// }\n"
    },
    {
      "sketchName": "syncdata-midi",
      "sketchCode": "/* syncData Preset : midi\nTransmit midi notes/pitchbend/controlchanges to all users.\nCheck Javascript Console for your midi device i/o ids\n\n1 - SYNC DATA (active in Sync Data)\n2 - COCODE (paste in COCODING session and uncomment)\n*/\n\n/* 1 - SYNC DATA */\nlet libs = [\n\t'includes/js/webmidi.min.js'\n];\n\nlet midiInput, midiOutput;\nsetupMidi(0, 0); // by id\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log('WebMidi could not be enabled.', err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tconsole.log(\"in  \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tconsole.log(\"out \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn];\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn);\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut];\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut);\n\t\t}\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = floor(127 * e.velocity);\n\t\t\tsyncData(note);\n\t\t});\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = 0;\n\t\t\tsyncData(note);\n\t\t});\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t};\n\t\t\tpitch.channel = e.channel;\n\t\t\tpitch.value = floor(127 * e.value);\n\t\t\tsyncData(pitch);\n\t\t});\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t};\n\t\t\tcontrol.channel = e.channel;\n\t\t\tcontrol.controllerNumber = e.controller.number;\n\t\t\tcontrol.controllerName = e.controller.name;\n\t\t\tcontrol.value = e.value\n\t\t\tsyncData(control);\n\t\t});\n\n\t});\n}\n\n/* 2 - COCODE */\nfunction parseData(obj){\n\tswitch(obj.type){\n\t\tcase 'noteon':\n\t\t\tnoteOn(obj);\n\t\tbreak;\n\t\tcase 'noteoff':\n\t\t\tnoteOff(obj);\n\t\tbreak;\n\t\tcase 'pitch':\n\t\t\tpitchBend(obj);\n\t\tbreak;\n\t\tcase 'control':\n\t\t\tcontrolChange(obj);\n\t\tbreak;\n\t}\n}\n\nfunction noteOn(note) {\n\tprint(note); // .type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction noteOff(note) {\n\tprint(note); // .type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction pitchBend(pitch) {\n\tprint(pitch); // .type, .channel, .value\n}\n\nfunction controlChange(control) {\n\tprint(control); // .type, .channel, .controllerNumber, .controllerName, .value\n}"
    }
  ]
}